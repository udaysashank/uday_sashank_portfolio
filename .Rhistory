library(shiny); runApp('C:/Users/HP/Downloads/ASSIGMENT/JOHNY/SHINY/E.R')
runApp('C:/Users/HP/Downloads/ASSIGMENT/JOHNY/SHINY/E1.R')
library(knitr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(rpart)
library(rsample)
library(caret)
library(mgcv)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
# Run this code chunk without altering it
# clear the session
rm(list=ls())
# Data is stored in a csv file, the first row contains the variable names.
# we call our data mydata
mydata<-read.csv ("Data_RLab5.csv", header=TRUE)
# Load the necessary libraries
library(shiny)
library(DT) # For interactive tables
library(ggplot2) # For improved plotting
library(dplyr) # For data manipulation
library(plotly) # For interactive plots
library(gplots)  # Load gplots for heatmap.2
library(caret)
library(randomForest)
library(e1071)
# Load the Walmart data
Walmart <- read.csv("C:/Users/HP/Downloads/Walmart.csv")
# Data Cleanup
# Convert Date column to Date format
Walmart$Date <- as.Date(Walmart$Date)
# Feature Engineering
# Extract Year, Month, and Day from Date
Walmart$Year <- format(Walmart$Date, "%Y")
Walmart$Month <- format(Walmart$Date, "%m")
Walmart$Day <- format(Walmart$Date, "%d")
# Calculate average weekly sales by store
average_sales_by_store <- Walmart %>%
group_by(Store) %>%
summarise(Avg_Weekly_Sales = mean(Weekly_Sales),
Std_Dev = sd(Weekly_Sales))
# Calculate average weekly sales by month
average_sales_by_month <- Walmart %>%
group_by(Month) %>%
summarise(Avg_Weekly_Sales = mean(Weekly_Sales),
Std_Dev = sd(Weekly_Sales))
# Calculate combined store and date average weekly sales
average_sales_by_store_and_date <- Walmart %>%
group_by(Store, Date) %>%
summarise(Avg_Weekly_Sales = mean(Weekly_Sales),
Std_Dev = sd(Weekly_Sales))
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Walmart Sales Data Exploration", windowTitle = "Walmart Sales Explorer"),
# Sidebar layout with input and output
sidebarLayout(
sidebarPanel(
# Input: Select variable for x-axis
selectInput("x_var", "Select X-Axis Variable", choices = c("Weekly_Sales", "Month", "Date", "Avg_Weekly_Sales")),
# Input: Select variable for y-axis
selectInput("y_var", "Select Y-Axis Variable", choices = colnames(Walmart))
),
mainPanel(
tabsetPanel(
# Descriptive Statistics Tab
tabPanel("Descriptive Statistics", verbatimTextOutput("dataset_summary")),
# Histogram Tab
tabPanel("Histogram", plotOutput("histogram_plot")),
# Scatter Plot Tab
tabPanel("Scatter Plot", plotOutput("scatter_plot")),
# Bar Plot Tab
tabPanel("Bar Plot - Weekly Sales by Month", plotOutput("bar_plot")),
# Quartile Plot Tab
tabPanel("Quartile Plot", plotOutput("quartile_plot")),
# Weekly Sales Over Time Tab
tabPanel("Weekly Sales Over Time", plotOutput("weekly_sales_over_time_plot")),
# Average Weekly Sales by Store Plot Tab
tabPanel("Avg Sales by Store", plotlyOutput("avg_sales_by_store_plot")),
# Average Weekly Sales by Month Plot Tab
tabPanel("Avg Sales by Month", plotlyOutput("avg_sales_by_month_plot")),
# Combined Sales Line Graph Tab
tabPanel("Combined Sales Line Graph", plotlyOutput("combined_sales_line_graph")),
# Correlation Heatmap Tab
tabPanel("Correlation Heatmap", plotOutput("correlation_heatmap")),
# Model Evaluation Tab
tabPanel("Model Evaluation", verbatimTextOutput("model_evaluation"))
)
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive expression for dataset summary
output$dataset_summary <- renderPrint({
summary(Walmart)
})
# Reactive expression for histogram
output$histogram_plot <- renderPlot({
ggplot(Walmart, aes_string(x = input$x_var)) +
geom_histogram(binwidth = 5000, fill = "#4CAF50", color = "#2E7D32", alpha = 0.7) +
labs(title = paste("Histogram of", input$x_var),
x = input$x_var, y = "Frequency") +
theme_minimal()
})
# Reactive expression to generate a scatter plot based on user input
output$scatter_plot <- renderPlot({
ggplot(Walmart, aes_string(x = input$x_var, y = input$y_var)) +
geom_point(color = "#1976D2", alpha = 0.7) +
labs(title = paste("Scatter plot of", input$x_var, "vs", input$y_var),
x = input$x_var, y = input$y_var) +
theme_minimal()
})
# Reactive expression for bar plot - Weekly Sales by Month
output$bar_plot <- renderPlot({
if (input$x_var == "Weekly_Sales") {
ggplot(Walmart, aes_string(x = "Month", fill = "Month")) +
geom_bar(color = "#FFA000", alpha = 0.7) +
labs(title = "Weekly Sales by Month",
x = "Month", y = "Count",
fill = "Month") +
theme_minimal()
} else {
ggplot(Walmart, aes_string(x = input$x_var, fill = "Month")) +
geom_bar(color = "#FFA000", alpha = 0.7) +
labs(title = "Weekly Sales by Month",
x = input$x_var, y = "Count",
fill = "Month") +
theme_minimal()
}
})
# Reactive expression for line plot - Quartile Sales
output$quartile_plot <- renderPlot({
# Group data by Date and calculate quartiles
quartile_data <- Walmart %>%
group_by(Date) %>%
summarise(Q1 = quantile(Weekly_Sales, 0.25),
Q3 = quantile(Weekly_Sales, 0.75))
ggplot(quartile_data, aes(x = Date)) +
geom_line(aes(y = Q1), color = "#673AB7", linetype = "dashed") +
geom_line(aes(y = Q3), color = "#673AB7", linetype = "dashed") +
labs(title = "Quartile Sales Over Time",
x = "Date", y = "Weekly Sales",
color = "Quartile") +
theme_minimal()
})
# Reactive expression for line plot - Weekly Sales Over Time
output$weekly_sales_over_time_plot <- renderPlot({
ggplot(Walmart, aes(x = Date, y = Weekly_Sales, color = as.factor(Store))) +
geom_line() +
labs(title = "Weekly Sales Over Time",
x = "Date", y = "Weekly Sales") +
theme_minimal()
})
# Reactive expression for average weekly sales by store plot with error bars
output$avg_sales_by_store_plot <- renderPlotly({
ggplotly(
ggplot(average_sales_by_store, aes(x = as.factor(Store), y = Avg_Weekly_Sales)) +
geom_bar(stat = "identity", fill = "#FF4081", alpha = 0.7) +
geom_errorbar(aes(ymin = Avg_Weekly_Sales - Std_Dev, ymax = Avg_Weekly_Sales + Std_Dev),
width = 0.2, color = "#E91E63") +
labs(title = "Average Weekly Sales by Store with Error Bars",
x = "Store", y = "Average Weekly Sales") +
theme_minimal()
)
})
# Reactive expression for average weekly sales by month plot with error bars
output$avg_sales_by_month_plot <- renderPlotly({
ggplotly(
ggplot(average_sales_by_month, aes(x = as.factor(Month), y = Avg_Weekly_Sales)) +
geom_bar(stat = "identity", fill = "#42A5F5", alpha = 0.7) +
geom_errorbar(aes(ymin = Avg_Weekly_Sales - Std_Dev, ymax = Avg_Weekly_Sales + Std_Dev),
width = 0.2, color = "#0D47A1") +
labs(title = "Average Weekly Sales by Month with Error Bars",
x = "Month", y = "Average Weekly Sales") +
theme_minimal()
)
})
# Reactive expression for combined store and date average weekly sales line graph with error bars
output$combined_sales_line_graph <- renderPlotly({
ggplotly(
ggplot(average_sales_by_store_and_date, aes(x = Date, y = Avg_Weekly_Sales, color = as.factor(Store))) +
geom_line() +
geom_errorbar(aes(ymin = Avg_Weekly_Sales - Std_Dev, ymax = Avg_Weekly_Sales + Std_Dev),
width = 0.2, color = "#E91E63") +
labs(title = "Combined Store and Date Average Weekly Sales Line Graph with Error Bars",
x = "Date", y = "Avg Weekly Sales", color = "Store") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
)
})
# Reactive expression for correlation heatmap
output$correlation_heatmap <- renderPrint({
# Select only numeric columns for correlation calculation
numeric_columns <- sapply(Walmart, is.numeric)
numeric_data <- Walmart[, numeric_columns]
# Calculate correlation matrix
correlation_matrix <- cor(numeric_data, use = "complete.obs")
# Print correlation matrix values
print(correlation_matrix)
})
# Additional reactive expression for rendering the heatmap plot
output$correlation_heatmap_plot <- renderPlot({
# Select only numeric columns for correlation calculation
numeric_columns <- sapply(Walmart, is.numeric)
numeric_data <- Walmart[, numeric_columns]
# Calculate correlation matrix
correlation_matrix <- cor(numeric_data, use = "complete.obs")
# Create a heatmap with annotations
heatmap.2(
correlation_matrix,
main = "Correlation Heatmap",
col = colorRampPalette(c("#1976D2", "white", "#FFA000"))(20),
scale = "none",
margins = c(10, 10),
xlab = "Variables",
ylab = "Variables",
cexRow = 1, cexCol = 1,  # Adjust text size
key.title = title("Correlation", cex.main = 1),  # Adjust key title size
notecol = "black",  # Color of the correlation values
tracecol = NULL,    # Color of the trace lines
density.info = "none",  # Do not display density plot
key = TRUE,          # Display color key
keysize = 1.5,       # Size of the key
symkey = FALSE       # Do not use symmetric key
)
})
# Reactive expression for model evaluation metrics
output$model_evaluation <- renderPrint({
# Split the data into training and testing sets
set.seed(123)  # Set seed for reproducibility
train_indices <- createDataPartition(Walmart$Weekly_Sales, p = 0.7, list = FALSE)
trainData <- Walmart[train_indices, ]
testData <- Walmart[-train_indices, ]
# Evaluate the linear regression model
lm_model <- lm(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag, data = trainData)
lm_predictions <- predict(lm_model, newdata = testData)
lm_r2 <- cor(lm_predictions, testData$Weekly_Sales)^2
lm_rmse <- sqrt(mean((lm_predictions - testData$Weekly_Sales)^2))
# Evaluate the random forest model
rf_model <- randomForest(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag, data = trainData)
rf_predictions <- predict(rf_model, newdata = testData)
rf_r2 <- cor(rf_predictions, testData$Weekly_Sales)^2
rf_rmse <- sqrt(mean((rf_predictions - testData$Weekly_Sales)^2))
cat("Linear Regression Model:\n")
cat("R-squared:", lm_r2, "\n")
cat("RMSE:", lm_rmse, "\n\n")
cat("Random Forest Model:\n")
cat("R-squared:", rf_r2, "\n")
cat("RMSE:", rf_rmse, "\n")
})
}
# Run the application
shinyApp(ui, server)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(gplots)
library(caret)
library(randomForest)
library(e1071)
# Load the Walmart data
Walmart <- read.csv("C:/Users/HP/Downloads/Walmart.csv")
# Data Cleanup
# Convert Date column to Date format
Walmart$Date <- as.Date(Walmart$Date)
# Feature Engineering
# Extract Year, Month, and Day from Date
Walmart$Year <- format(Walmart$Date, "%Y")
Walmart$Month <- format(Walmart$Date, "%m")
Walmart$Day <- format(Walmart$Date, "%d")
# Exploratory Data Analysis (EDA)
# Display the first few rows of the dataset
head(Walmart)
# Summary statistics
summary(Walmart)
# Distribution plot for Weekly Sales
ggplot(Walmart, aes(x = Weekly_Sales)) +
geom_histogram(binwidth = 5000, fill = "#4CAF50", color = "#2E7D32", alpha = 0.7) +
labs(title = "Distribution of Weekly Sales",
x = "Weekly Sales", y = "Frequency") +
theme_minimal()
# Boxplot for Weekly Sales by Store
ggplot(Walmart, aes(x = Store, y = Weekly_Sales)) +
geom_boxplot(fill = "#FF4081", alpha = 0.7) +
labs(title = "Boxplot of Weekly Sales by Store",
x = "Store", y = "Weekly Sales") +
theme_minimal()
# Scatter plot for Weekly Sales and Temperature
ggplot(Walmart, aes(x = Temperature, y = Weekly_Sales)) +
geom_point(color = "#1976D2", alpha = 0.7) +
labs(title = "Scatter Plot of Weekly Sales vs Temperature",
x = "Temperature", y = "Weekly Sales") +
theme_minimal()
# Quartile plot
quartile_data <- Walmart %>%
group_by(Date) %>%
summarise(Q1 = quantile(Weekly_Sales, 0.25),
Q3 = quantile(Weekly_Sales, 0.75))
ggplot(quartile_data, aes(x = Date)) +
geom_line(aes(y = Q1), color = "#673AB7", linetype = "dashed") +
geom_line(aes(y = Q3), color = "#673AB7", linetype = "dashed") +
labs(title = "Quartile Sales Over Time",
x = "Date", y = "Weekly Sales",
color = "Quartile") +
theme_minimal()
# Model Evaluation
# Split the data into training and testing sets
set.seed(123)
train_indices <- createDataPartition(Walmart$Weekly_Sales, p = 0.7, list = FALSE)
trainData <- Walmart[train_indices, ]
testData <- Walmart[-train_indices, ]
# Evaluate the linear regression model
lm_model <- lm(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag, data = trainData)
lm_predictions <- predict(lm_model, newdata = testData)
lm_r2 <- cor(lm_predictions, testData$Weekly_Sales)^2
lm_rmse <- sqrt(mean((lm_predictions - testData$Weekly_Sales)^2))
# Evaluate the random forest model
rf_model <- randomForest(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag, data = trainData)
rf_predictions <- predict(rf_model, newdata = testData)
rf_r2 <- cor(rf_predictions, testData$Weekly_Sales)^2
rf_rmse <- sqrt(mean((rf_predictions - testData$Weekly_Sales)^2))
cat("Linear Regression Model:\n")
cat("R-squared:", lm_r2, "\n")
cat("RMSE:", lm_rmse, "\n\n")
cat("Random Forest Model:\n")
cat("R-squared:", rf_r2, "\n")
cat("RMSE:", rf_rmse, "\n")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(gplots)
library(caret)
library(randomForest)
library(e1071)
# Load the Walmart data
Walmart <- read.csv("C:/Users/HP/Downloads/Walmart.csv")
# Data Cleanup
# Convert Date column to Date format
Walmart$Date <- as.Date(Walmart$Date)
# Feature Engineering
# Extract Year, Month, and Day from Date
Walmart$Year <- format(Walmart$Date, "%Y")
Walmart$Month <- format(Walmart$Date, "%m")
Walmart$Day <- format(Walmart$Date, "%d")
# Exploratory Data Analysis (EDA)
# Display the first few rows of the dataset
head(Walmart)
# Summary statistics
summary(Walmart)
# Distribution plot for Weekly Sales
ggplot(Walmart, aes(x = Weekly_Sales)) +
geom_histogram(binwidth = 5000, fill = "#4CAF50", color = "#2E7D32", alpha = 0.7) +
labs(title = "Distribution of Weekly Sales",
x = "Weekly Sales", y = "Frequency") +
theme_minimal()
# Boxplot for Weekly Sales by Store
ggplot(Walmart, aes(x = Store, y = Weekly_Sales)) +
geom_boxplot(fill = "#FF4081", alpha = 0.7) +
labs(title = "Boxplot of Weekly Sales by Store",
x = "Store", y = "Weekly Sales") +
theme_minimal()
# Scatter plot for Weekly Sales and Temperature
ggplot(Walmart, aes(x = Temperature, y = Weekly_Sales)) +
geom_point(color = "#1976D2", alpha = 0.7) +
labs(title = "Scatter Plot of Weekly Sales vs Temperature",
x = "Temperature", y = "Weekly Sales") +
theme_minimal()
# Quartile plot
quartile_data <- Walmart %>%
group_by(Date) %>%
summarise(Q1 = quantile(Weekly_Sales, 0.25),
Q3 = quantile(Weekly_Sales, 0.75))
ggplot(quartile_data, aes(x = Date)) +
geom_line(aes(y = Q1), color = "#673AB7", linetype = "dashed") +
geom_line(aes(y = Q3), color = "#673AB7", linetype = "dashed") +
labs(title = "Quartile Sales Over Time",
x = "Date", y = "Weekly Sales",
color = "Quartile") +
theme_minimal()
# Model Evaluation
# Split the data into training and testing sets
set.seed(123)
train_indices <- createDataPartition(Walmart$Weekly_Sales, p = 0.7, list = FALSE)
trainData <- Walmart[train_indices, ]
testData <- Walmart[-train_indices, ]
# Evaluate the linear regression model
lm_model <- lm(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag, data = trainData)
lm_predictions <- predict(lm_model, newdata = testData)
lm_r2 <- cor(lm_predictions, testData$Weekly_Sales)^2
lm_rmse <- sqrt(mean((lm_predictions - testData$Weekly_Sales)^2))
# Evaluate the random forest model
rf_model <- randomForest(Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + Holiday_Flag, data = trainData)
rf_predictions <- predict(rf_model, newdata = testData)
rf_r2 <- cor(rf_predictions, testData$Weekly_Sales)^2
rf_rmse <- sqrt(mean((rf_predictions - testData$Weekly_Sales)^2))
cat("Linear Regression Model:\n")
cat("R-squared:", lm_r2, "\n")
cat("RMSE:", lm_rmse, "\n\n")
cat("Random Forest Model:\n")
cat("R-squared:", rf_r2, "\n")
cat("RMSE:", rf_rmse, "\n")
